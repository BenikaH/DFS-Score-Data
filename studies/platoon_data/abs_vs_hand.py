"""
Calculates the at bats of a player vs pitch hand. Tries to determine which
players are used primarily as platoon players.

Note: This script will probably not be functional for the time being because
I use a different table in the DB to obtain the pitch hand.
"""

from lib.DB import DB
import lib.get_player as get_player
from collections import defaultdict
import tabulate

db = DB()


def get_batter_ids(sample_lim=100):
    """
    Gets batter ids for batters have at least the amount of given at bats
    :sample_lim:
        int, sample size constraint to include batters in the sample.
    :return:
        A list of batter ids
    """
    q = "SELECT id FROM rguru_hitters"
    res = [x[0] for x in db.query(q)]
    selected_batters = []
    for id_ in set(res):
        if res.count(id_) >= sample_lim:
            selected_batters.append(id_)

    return selected_batters


def get_pitchers(rguru_id=None):
    """
    Given an ID, gets the pitcher ids of all starting pitchers faced.

    If an ID is not given, it selects all starting pitchers. Used to
    get a league average of L/R pitchers.
    """
    if rguru_id is None:
        q = "SELECT id FROM rguru_pitchers WHERE start = 'Y'"
        ids = [x[0] for x in db.query(q)]
    else:
        q = "SELECT date, opp FROM rguru_hitters WHERE id=%s AND start = 'Y'"
        pitcher_games = db.query(q, (rguru_id,))
        ids = []
        for date, opp in pitcher_games:
            q = """SELECT id FROM rguru_pitchers WHERE date = %s AND
                                                       team = %s AND
                                                       start = 'Y'"""
            ids += [x[0] for x in db.query(q, (date, opp))]
    return ids


def get_pitchers_many(rguru_id_list):
    """
    Tries to make a faster implementation of fetching pitcher ids for batters
    by doing a list of ids at once.
    :param rguru_id_list:
        A list of rguru ids
    :return:

    """
    q1 = "SELECT id AS id_, date, opp FROM rguru_hitters"
    q2 = "SELECT id AS id_, date, team FROM rguru_pitchers WHERE start = 'Y'"

    batter_pitcher_info = defaultdict(list)
    for id_, date, opp in db.query(q1):
        if id_ not in rguru_id_list:
            continue
        batter_pitcher_info[id_].append((date, opp))

    pitcher_ids = {}
    for id_, date, team in db.query(q2):
        pitcher_ids[(date, team)] = id_

    batter_pitcher_ids = defaultdict(list)
    for bat_id, pitcher_list in batter_pitcher_info.items():
        for tup in pitcher_list:
            # Add try/except block to bypass errors of website data.
            try:
                batter_pitcher_ids[bat_id].append(pitcher_ids[tup])
            except:
                pass

    return batter_pitcher_ids


def get_ratio(id_list):
    """
    Takes a list of pitcher IDs generated by get_pitchers function and
    returns the ratio of left-handed to right-handed pitchers faced.
    """
    q = """SELECT bbm_id, rguru_id FROM player_ids WHERE
            bbm_id IS NOT NULL AND rguru_id IS NOT NULL"""

    id_dict = {v: k for k, v in db.query(q)}

    pos_ids = []
    for id_ in id_list:
        if id_ in id_dict:
            pos_ids.append(id_dict[id_])
    q = "SELECT bbm_id, pitch_hand FROM pitch_hand"
    hand_dict = {str(k): v for k, v in db.query(q)}

    lr = [0, 0]

    for id_ in pos_ids:
        if hand_dict[id_] == 'L':
            lr[0] += 1
        elif hand_dict[id_] == 'R':
            lr[1] += 1
        else:
            print "No pitch_hand data for {}".format(id_)

    l = float(lr[0]) / (lr[1] + lr[0])
    return l, 1 - l


def get_all_ratios(id_dict):
    batters = []
    for bat_id, pitcher_id_list in id_dict.items():
        l, r = get_ratio(pitcher_id_list)
        batters.append((bat_id, l, r))
    return batters


def get_splits_for_batter(rguru_id):
    batter_name = get_player.name_from_id(rguru_id)
    pitcher_ids = get_pitchers(rguru_id)
    # for pid in pitcher_ids:
    #     print get_player.name_from_id(pid, 'p')
    l, r = get_ratio(pitcher_ids)
    print "Pitchers faced by {}".format(batter_name)
    print "Lefties ({:.2f}%) | Righties ({:.2f}%)".format(l*100, r*100)


def get_all_splits(sample_lim=50):
    """
    Will get L/R splits for all batters at bats > sample_lim.
    :return:
    """
    bat_ids = get_batter_ids(sample_lim)
    pitcher_ids = get_pitchers_many(bat_ids)
    batter_ratios = [[get_player.name_from_id(id_), '{:.2f}'.format(l*100), '{:.2f}'.format(r*100)]
                     for id_, l, r in
                     sorted(get_all_ratios(pitcher_ids), key=lambda x: x[1], reverse=True)]
    print tabulate.tabulate(batter_ratios, ['Player', 'vs L', 'vs R'], 'fancy_grid')


get_all_splits()

db.finish()